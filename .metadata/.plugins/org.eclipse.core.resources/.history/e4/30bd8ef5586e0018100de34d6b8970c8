import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; // resolves problem with java.awt.List and java.util.List

/**
 * A class that represents a picture.  This class inherits from 
 * SimplePicture and allows the student to add functionality to
 * the Picture class.  
 * 
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
	///////////////////// constructors //////////////////////////////////

	/**
	 * Constructor that takes no arguments
	 */
	public Picture()
	{
		/* not needed but use it to show students the implicit call to super()
		 * child constructors always call a parent constructor
		 */
		super();
	}
	/**
	 * Constructor that takes a file name and creates the picture
	 * @param fileName the name of the file to create the picture from
	 */
	public Picture(String fileName)
	{
		// let the parent class handle this fileName
		super(fileName);
	}
	/**
	 * Constructor that takes the width and height
	 * @param height the height of the desired picture
	 * @param width the width of the desired picture
	 */
	public Picture(int height, int width)
	{
		// let the parent class handle this width and height
		super(width,height);
	}
	/**
	 * Constructor that takes a picture and creates a
	 * copy of that picture
	 * @param copyPicture the picture to copy
	 */
	public Picture(Picture copyPicture)
	{
		// let the parent class do the copy
		super(copyPicture);
	}
	/**
	 * Constructor that takes a buffered image
	 * @param image the buffered image to use
	 */
	public Picture(BufferedImage image)
	{
		super(image);
	}

	////////////////////// methods ///////////////////////////////////////

	/**
	 * Method to return a string with information about this picture.
	 * @return a string with information about the picture such as fileName,
	 * height and width.
	 */
	public String toString()
	{
		String output = "Picture, filename " + getFileName() + 
				" height " + getHeight() 
				+ " width " + getWidth();
		return output;
	}

	/** Method to set the red to 0 */
	public void zeroRed()
	{
		Pixel[][] pixels = this.getPixels2D();
		for (Pixel[] rowArray : pixels)
		{
			for (Pixel pixelObj : rowArray)
			{
				pixelObj.setRed(0);
			}
		}
	}
	/** Method to set the green to 0 */
	public void zeroGreen()
	{
		Pixel[][] pixels = this.getPixels2D();
		for (Pixel[] rowArray : pixels)
		{
			for (Pixel pixelObj : rowArray)
			{
				pixelObj.setGreen(0);
			}
		}
	}
	/** Method to set the blue to 0 */
	public void zeroBlue()
	{
		Pixel[][] pixels = this.getPixels2D();
		for (Pixel[] rowArray : pixels)
		{
			for (Pixel pixelObj : rowArray)
			{
				pixelObj.setBlue(0);
			}
		}
	}
	/** Method to set everything except red to 0 */
	public void keepOnlyRed()
	{
		zeroGreen();
		zeroBlue();
	}
	/** Method to set everything except green to 0 */
	public void keepOnlyGreen()
	{
		zeroBlue();
		zeroRed();
	}
	/** Method to set everything except blue to 0 */
	public void keepOnlyBlue()
	{
		zeroRed();
		zeroGreen();
	}
	/** Method to negate the image */
	public void negate()
	{
		Pixel[][] pixels = this.getPixels2D();
		for (Pixel[] rowArray : pixels)
		{
			for (Pixel pixelObj : rowArray)
			{
				pixelObj.setRed(255 - pixelObj.getRed());
				pixelObj.setGreen(255 - pixelObj.getGreen());
				pixelObj.setBlue(255 - pixelObj.getBlue());
			}
		}
	}
	/** Method to grayscale the image */
	public void grayscale()
	{
		Pixel[][] pixels = this.getPixels2D();
		for (Pixel[] rowArray : pixels)
		{
			for (Pixel pixelObj : rowArray)
			{
				int avg = (pixelObj.getRed() + pixelObj.getGreen() + pixelObj.getBlue()) / 3;
				pixelObj.setRed(avg);
				pixelObj.setGreen(avg);
				pixelObj.setBlue(avg);
			}
		}
	}
	/** Method to enhance the fish */
	public void fixUnderwater()
	{
		Pixel[][] pixels = this.getPixels2D();
		for (Pixel[] rowArray : pixels)
		{
			for (Pixel pixelObj : rowArray)
			{
				if (pixelObj.getRed() < 30 && pixelObj.getBlue() > 160)
				{
					pixelObj.setRed(pixelObj.getRed() / 2);
					pixelObj.setBlue((int)(pixelObj.getBlue() * 1.3));
				}
			}
		}
	}
	/** Method that mirrors the picture around a 
	 * vertical mirror in the center of the picture
	 * from left to right
	 */
	public void mirrorVertical()
	{
		Pixel[][] pixels = this.getPixels2D();
		Pixel leftPixel = null;
		Pixel rightPixel = null;
		int width = pixels[0].length;
		for (int row = 0; row < pixels.length; row++)
		{
			for (int col = 0; col < width / 2; col++)
			{
				leftPixel = pixels[row][col];
				rightPixel = pixels[row][width - 1 - col];
				rightPixel.setColor(leftPixel.getColor());
			}
		}
	}
	/** Method that mirrors the picture around a 
	 * vertical mirror in the center of the picture
	 * from right to left
	 */
	public void mirrorVerticalRightToLeft()
	{
		Pixel[][] pixels = this.getPixels2D();
		Pixel leftPixel = null;
		Pixel rightPixel = null;
		int width = pixels[0].length;
		for (int row = 0; row < pixels.length; row++)
		{
			for (int col = 0; col < width / 2; col++)
			{
				leftPixel = pixels[row][col];
				rightPixel = pixels[row][width - 1 - col];
				leftPixel.setColor(rightPixel.getColor());
			}
		}
	}
	/** Method that mirrors the picture around a 
	 * horizontal mirror in the center of the picture
	 * from top to bottom
	 */
	public void mirrorHorizontal()
	{
		Pixel[][] pixels = this.getPixels2D();
		Pixel topPixel = null;
		Pixel botPixel = null;
		int width = pixels[0].length;
		for (int col = 0; col < width; col++)
		{
			for (int row = 0; row < pixels.length / 2; row++)
			{
				topPixel = pixels[row][col];
				botPixel = pixels[pixels.length - 1 - row][col];
				botPixel.setColor(topPixel.getColor());
			}
		}
	}
	/** Method that mirrors the picture around a 
	 * horizontal mirror in the center of the picture
	 * from bottom to top
	 */
	public void mirrorHorizontalBotToTop()
	{
		Pixel[][] pixels = this.getPixels2D();
		Pixel topPixel = null;
		Pixel botPixel = null;
		int width = pixels[0].length;
		for (int col = 0; col < width; col++)
		{
			for (int row = 0; row < pixels.length / 2; row++)
			{
				topPixel = pixels[row][col];
				botPixel = pixels[pixels.length - 1 - row][col];
				topPixel.setColor(botPixel.getColor());
			}
		}
	}
	public void mirrorDiagonal()
	{
		Pixel[][] pixels = this.getPixels2D();
		Pixel topPixel = null;
		Pixel botPixel = null;
		int dim = Math.min(pixels.length,pixels[0].length);
		for (int row = 0; row < dim - 1; row++)
		{
			for (int col = row + 1; col < dim; col++)
			{
				topPixel = pixels[row][col];
				botPixel = pixels[col][row];
				topPixel.setColor(botPixel.getColor());
			}
		}
	}
	/** Mirror just part of a picture of a temple */
	public void mirrorTemple()
	{
		int mirrorPoint = 276;
		Pixel leftPixel = null;
		Pixel rightPixel = null;
		int count = 0;
		Pixel[][] pixels = this.getPixels2D();
		// loop through the rows
		for (int row = 27; row < 97; row++)
		{
			// loop from 13 to just before the mirror point
			for (int col = 13; col < mirrorPoint; col++)
			{
				count++;
				leftPixel = pixels[row][col];
				rightPixel = pixels[row][mirrorPoint - col + mirrorPoint];
				rightPixel.setColor(leftPixel.getColor());
			}
		}
		System.out.println(count);
	}
	/** Mirror arms of snowman */
	public void mirrorArms()
	{
		int mirrorPoint = 193;
		Pixel topPixel = null;
		Pixel botPixel = null;
		Pixel[][] pixels = this.getPixels2D();
		for (int row = 158; row < mirrorPoint; row++)
	    {
			for (int col = 103; col < 170; col++)
			{
				topPixel = pixels[row][col];
				botPixel = pixels[mirrorPoint - row + mirrorPoint][col];
				botPixel.setColor(topPixel.getColor());
			}
		}
		mirrorPoint = 190;
		topPixel = null;
		botPixel = null;
		for (int row = 171; row < mirrorPoint; row++)
	    {
			for (int col = 239; col < 294; col++)
			{
				topPixel = pixels[row][col];
				botPixel = pixels[mirrorPoint - row + mirrorPoint][col];
				botPixel.setColor(topPixel.getColor());
			}
		}
	}
	/** Mirror seagull */
	public void mirrorGull()
	{
		int mirrorPoint = 350;
		Pixel leftPixel = null;
		Pixel rightPixel = null;
		Pixel[][] pixels = this.getPixels2D();
		// loop through the rows
		for (int row = 233; row < 325; row++)
		{
			// loop from 13 to just before the mirror point
			for (int col = 232; col < mirrorPoint; col++)
			{
				leftPixel = pixels[row][col];
				rightPixel = pixels[row][mirrorPoint - col + mirrorPoint];
				rightPixel.setColor(leftPixel.getColor());
			}
		}
	}
	/** copy from the passed fromPic to the
	 * specified startRow and startCol in the
	 * current picture
	 * @param fromPic the picture to copy from
	 * @param startRow the start row to copy to
	 * @param startCol the start col to copy to
	 */
	public void copy(Picture fromPic, int startRow, int startCol)
	{
		Pixel fromPixel = null;
		Pixel toPixel = null;
		Pixel[][] toPixels = this.getPixels2D();
		Pixel[][] fromPixels = fromPic.getPixels2D();
		for (int fromRow = 0, toRow = startRow;
				fromRow < fromPixels.length && toRow < toPixels.length;
				fromRow++, toRow++)
		{
			for (int fromCol = 0, toCol = startCol;
					fromCol < fromPixels[0].length && toCol < toPixels[0].length;
					fromCol++, toCol++)
			{
				fromPixel = fromPixels[fromRow][fromCol];
				toPixel = toPixels[toRow][toCol];
				toPixel.setColor(fromPixel.getColor());
			}
		}
	}
	/** copy function which allows part of fromPic */
	public void copy(Picture fromPic, int startRow, int startCol, int copyStartRow, int copyEndRow, int copyStartCol, int copyEndCol)
	{
		Pixel fromPixel = null;
		Pixel toPixel = null;
		Pixel[][] toPixels = this.getPixels2D();
		Pixel[][] fromPixels = fromPic.getPixels2D();
		for (int fromRow = copyStartRow, toRow = startRow;
				fromRow < copyEndRow && toRow < copyStartRow + copyEndRow;
				fromRow++, toRow++)
		{
			for (int fromCol = copyStartCol, toCol = startCol;
					fromCol < copyEndCol && toCol < copyStartCol + copyEndCol;
					fromCol++, toCol++)
			{
				fromPixel = fromPixels[fromRow][fromCol];
				toPixel = toPixels[toRow][toCol];
				toPixel.setColor(fromPixel.getColor());
			}
		}
	}
	/** Method to create a collage of several pictures */
	public void createCollage()
	{
		Picture flower1 = new Picture("flower1.jpg");
		Picture flower2 = new Picture("flower2.jpg");
		this.copy(flower1,0,0);
		this.copy(flower2,100,0);
		this.copy(flower1,200,0);
		Picture flowerNoBlue = new Picture(flower2);
		flowerNoBlue.zeroBlue();
		this.copy(flowerNoBlue,300,0);
		this.copy(flower1,400,0);
		this.copy(flower2,500,0);
		this.mirrorVertical();
		this.write("/Users/eppersonl1493/Desktop/APCSA-P1-master/Labs/src/labs/unit16/pixLab/images/collage.jpg");
	}
	/** Method to create a collage of several pictures
	 * different from createCollage
	 */
	public void myCollage()
	{
		Picture trump1 = new Picture("trump.jpg");
		Picture trump2 = new Picture("trump.jpg");
		Picture trump3 = new Picture("trump.jpg");
		Picture flower1 = new Picture("flower1.jpg");
		Picture flower2 = new Picture("flower1.jpg");
		Picture flower3 = new Picture("flower1.jpg");
		Picture gorge1 = new Picture("gorge.jpg");
		Picture gorge2 = new Picture("gorge.jpg");
		Picture gorge3 = new Picture("gorge.jpg");
		trump1.mirrorDiagonal();
		trump1.negate();
		this.copy(trump1, 0, 0);
		trump2 = trump2.scale(0.25, 0.25);
		trump2.grayscale();
		this.copy(trump2, 0, 200);
		trump3 = trump3.scale(0.25, 0.25);
		trump3.zeroBlue();
		this.copy(trump3, 0, 400);
		flower1.mirrorHorizontalBotToTop();
		this.copy(flower1, 200, 0);
		flower2.keepOnlyBlue();
		this.copy(flower2, 400, 0);
		flower3.mirrorVertical();
		this.copy(flower3, 300, 200);
		gorge1 = gorge1.scale(0.25, 0.25);
		gorge1.negate();
		this.copy(gorge1, 300, 400);
		gorge2 = gorge2.scale(0.25,0.25);
		gorge2.mirrorVerticalRightToLeft();
		this.copy(gorge2, 200, 200);
		gorge3 = gorge3.scale(0.25, 0.25);
		gorge3.keepOnlyRed();
		gorge3.zeroRed();
		this.copy(gorge3, 400, 400);
	}
	/** Method to show large changes in color 
    * @param edgeDist the distance for finding edges
    */
	public void edgeDetection(int edgeDist)
	{
		Pixel leftPixel = null;
		Pixel rightPixel = null;
		Pixel[][] pixels = this.getPixels2D();
		Color rightColor = null;
		for (int row = 0; row < pixels.length; row++)
		{
			for (int col = 0; col < pixels[0].length - 1; col++)
			{
				leftPixel = pixels[row][col];
				rightPixel = pixels[row][col + 1];
				rightColor = rightPixel.getColor();
				if (leftPixel.colorDistance(rightColor) > edgeDist) leftPixel.setColor(Color.BLACK);
				else leftPixel.setColor(Color.WHITE);
			}
		}
		Pixel topPixel = null;
		Pixel botPixel = null;
		Color botColor = null;
		for (int col = 0; col < pixels[0].length; col++)
		{
			for (int row = 0; row < pixels.length - 1; row++)
			{
				topPixel = pixels[row][col];
				botPixel = pixels[row + 1][col];
				botColor = botPixel.getColor();
				if (topPixel.colorDistance(botColor) > edgeDist) topPixel.setColor(Color.BLACK);
				else topPixel.setColor(Color.WHITE);
			}
		}
	}
	/** Method to encode a message picture in this picture */ 
	public void encode(Picture messagePict)
	{
		boolean[] primes = new boolean[256];
		for (int i = 2; i < 256; i++) primes[i] = true;
		for (int i = 2; i <= 16; i++)
		{
			if (primes[i])
			{
				for (int j = i * i; j < 256; j += i) primes[j] = false;
			}
		}
		Pixel[][] pixels = this.getPixels2D();
		Pixel[][] messagePixels = messagePict.getPixels2D();
		for (int r = 0; r < pixels.length; r++)
		{
			for (int c = 0; c < pixels[0].length; c++)
			{
				Pixel pixel = pixels[r][c];
				Pixel messagePixel = messagePixels[r][c];
				if (messagePixel.colorDistance(Color.BLACK) < 200)
				{
					int newBlue = pixel.getBlue();
					if (newBlue < 2) newBlue = 2;
					while (!primes[newBlue]) newBlue--;
					pixel.setBlue(newBlue);
				}
				else
				{
					int newBlue = pixel.getBlue();
					while (primes[newBlue]) newBlue--;
					pixel.setBlue(newBlue);
				}
			}
		}
	}
	/** Method to decode the message hidden in the picture */
	public Picture decode()
	{
		boolean[] primes = new boolean[256];
		for (int i = 2; i < 256; i++) primes[i] = true;
		for (int i = 2; i <= 16; i++)
		{
			if (primes[i])
			{
				for (int j = i * i; j < 256; j += i) primes[j] = false;
			}
		}
		Pixel[][] pixels = this.getPixels2D();
		Picture messagePict = new Picture(pixels.length,pixels[0].length);
		Pixel[][] messagePixels = messagePict.getPixels2D();
		for (int r = 0; r < pixels.length; r++)
		{
			for (int c = 0; c < pixels[0].length; c++)
			{
				Pixel pixel = pixels[r][c];
				Pixel messagePixel = messagePixels[r][c];
				if (primes[pixel.getBlue()]) messagePixel.setColor(Color.BLACK);
				else messagePixel.setColor(Color.WHITE);
			}
		}
		return messagePict;
	}

	/** Main method for testing - each class in Java can have a main
	 * method
	 */
	public static void main(String[] args)
	{
		Picture beach = new Picture("beach.jpg");
		beach.explore();
		beach.zeroBlue();
		beach.explore();
	}
}